{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# The template default set classes. #}
{%
  set classes = [
  'paragraph', 'grid-x', content.bp_view['#items']|length > 1 ? 'grid-margin-x mobile-sep',
  content.bp_view['#items']|length == 1 ? 'grid-container full',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  'paragraph--id--' ~ paragraph.id.value,
]
%}

{% set paragTitle = '' %}
{% set paragTitle %}
  {{ content.field_title }}
{% endset %}
{% set wrapper_classes = [
  'no-padding-mobile paragraph grid-container column-wrapper',
]
%}
{% set layout_classes = ['cell small-12'] %}
{% if content.bp_width|render %}
  {% set layout_width = content.bp_width['#items'].getString() %}
  {% set layout_classes = [
    'paragraph--width--tiny' == layout_width ? 'large-6 large-offset-3',
    'paragraph--width--narrow' == layout_width ? 'large-8 large-offset-2',
    'paragraph--width--medium' == layout_width ? 'large-10 large-offset-1',
    'paragraph--width--wide' == layout_width ? 'large-12',
    'paragraph--width--full' == layout_width ? 'large-12'
  ]|merge(layout_classes)
  %}
  {% if 'paragraph--width--full' == layout_width %}
    {% set wrapper_classes = ['full']|merge(wrapper_classes) %}
  {% endif %}
{% endif %}

{# Prints div with classes, and content without Width and Background. #}
<div class="{{ wrapper_classes|join(' ') }}" >
  <div class="{{ layout_classes|join(' ') }}">
    {% if paragTitle|striptags|trim %}
      <h2 class="title-sep big padding-mobile">{{ content.field_title }}</h2>
    {% endif %}
    <div{{ attributes.addClass(classes) }}>
      {% if content.bp_view['#items']|length > 1 %}
       {% for key, item in content.bp_view if key|first != '#' %}
         {% set rowClass = key is even ? 'large-8 custom-padding':'large-4' %}
         <div class="cell small-12 {{ rowClass }}">
           <div class="same-height full-height">{{ item }}</div>
         </div>
       {% endfor %}
     {% else %}
      {# for slider type #}
      {% for key, item in content.bp_view if key|first != '#' %}
        <div class="cell small-12">
          <div class="padding-mobile">
            {{ item }}
          </div>
        </div>
      {% endfor %}
      {% endif %}
    </div>
  </div>
</div>
