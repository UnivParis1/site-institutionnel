{#
/**
 * @file
 * Bootstrap Paragraphs template for displaying an Accordion (Collapse).
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('bootstrap_paragraphs/bootstrap-paragraphs') }}
{{ attach_library('bootstrap_paragraphs/bp-accordion') }}

{# Renders Width field. #}
{# Sets class name from values in database. #}
{% if content.bp_width|render %}
  {% set layout_width = content.bp_width['#items'].getString() %}
  {% set layout_width_classes = [
    'paragraph--width--tiny' == layout_width ? 'paragraph--width--tiny',
    'paragraph--width--narrow' == layout_width ? 'paragraph--width--narrow',
    'paragraph--width--medium' == layout_width ? 'paragraph--width--medium',
    'paragraph--width--wide' == layout_width ? 'paragraph--width--wide',
    'paragraph--width--full' == layout_width ? 'paragraph--width--full',
  ]
  %}
{% endif %}

{# Renders Background field. #}
{# Sets class name from values in database. #}
{% if content.bp_background|render %}
  {% set layout_background = content.bp_background['#items'].getString() %}
  {% set layout_background_classes = [
    'paragraph--color blue-pantheon-sorbonne' == layout_background ? 'paragraph--color blue-pantheon-sorbonne',
    'paragraph--color fondor' == layout_background ? 'paragraph--color fondor',
    'paragraph--color fondbler fondbleu' == layout_background ? 'paragraph--color fondbler fondbleu',
    'paragraph--color fondorange' == layout_background ? 'paragraph--color fondorange',
    'paragraph--color fondrose' == layout_background ? 'paragraph--color fondrose',
    'paragraph--color fondvert' == layout_background ? 'paragraph--color fondvert',
    'paragraph--color paragraph--color--rgba-black-slight' == layout_background ? 'paragraph--color paragraph--color--rgba-black-slight',
    'paragraph--color paragraph--color--rgba-bluegrey-slight' == layout_background ? 'paragraph--color paragraph--color--rgba-bluegrey-slight',
    'paragraph--color paragraph--color--rgba-bluegrey-light' == layout_background ? 'paragraph--color paragraph--color--rgba-bluegrey-light',
    'paragraph--color paragraph--color--rgba-bluegrey-strong' == layout_background ? 'paragraph--color paragraph--color--rgba-bluegrey-strong',
    'paragraph--color paragraph--color--rgba-grey-slight' == layout_background ? 'paragraph--color paragraph--color--rgba-grey-slight',
    'paragraph--color paragraph--color--rgba-grey-light' == layout_background ? 'paragraph--color paragraph--color--rgba-grey-light',
    'paragraph--color paragraph--color--rgba-grey-strong' == layout_background ? 'paragraph--color paragraph--color--rgba-grey-strong',
    'paragraph--color paragraph--color--rgba-white-light' == layout_background ? 'paragraph--color paragraph--color--rgba-white-light',
    'paragraph--color--transparent' == layout_background ? 'paragraph--color--transparent',
  ]
  %}
{% endif %}

{# The template default set classes. #}
{# Sets Paragraph ID as class. #}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
'paragraph--id--' ~ paragraph.id.value,
accordion_active ? 'paragraph--accordion_active--',
]
%}

{# Merges Width field with classes. #}
{% set width_field = content.bp_width|render %}
{% if width_field %}
  {% set classes = classes|merge(layout_width_classes) %}
{% endif %}

{# Merges Background field with classes. #}
{% set background_field = content.bp_background|render %}
{% if background_field %}
  {% set classes = classes|merge(layout_background_classes) %}
{% endif %}

{# Sets Unique ID for Accordion from Paragraph ID. #}
{% set paragraph_id = 'accordion-' ~ paragraph.id.value %}

{# Prints Accordion template. #}
<div class="paragraph--bp-accordion-container">
  {% if content.bp_accordion_expand['#items'].getString() %}
    <button type="button" class="btn btn-primary bp-accordion-button" title="{{ 'Click to expand all accordions in this section.'|trans }}">
      {{ 'Expand All'|trans }}
    </button>
  {% endif %}
  <div{{ attributes.addClass(classes).setAttribute('id', paragraph_id) }} role="tablist" aria-multiselectable="true">
    <div class="paragraph__column">
      {{ title_suffix }}
      <div class="card panel panel-default">
        {% if content.bp_show_indicators['#items'].getString() %}
          {% set indicator_class = 'display' %}
        {% else %}
          {% set indicator_class = 'normal' %}
        {%  endif %}
        {# Loop through all of the accordion sections. #}
        {% for key, item in content.bp_accordion_section if key|first != '#' %}
          {# Set variables if accordion should be shown. #}
          {% if item['#paragraph'].bp_show_button.value %}
            {% set show_accordion = ' in' %}
            {% set aria = 'true' %}
          {% else %}
            {% set show_accordion = '' %}
            {% set aria = 'false' %}
          {% endif %}
          <div class="card-header panel-heading" role="tab" id="heading-{{ paragraph_id }}-{{ key + 1 }}">
            <div class="panel-title">
              <a class="{{ (indicator_class) }}" role="button" data-toggle="collapse" data-parent="{{ paragraph_id }}" href="#collapse-{{ paragraph_id }}-{{ key + 1 }}" aria-expanded="{{ aria }}" aria-controls="collapse-{{ paragraph_id }}-{{ key + 1 }}">
                {# Print the accordion section title. #}
                {{ item['#paragraph'].bp_accordion_section_title.value }}
              </a>
            </div>
          </div>
          <div id="collapse-{{ paragraph_id }}-{{ key + 1 }}" class="card-block panel-collapse collapse{{ show_accordion }}" role="tabpanel" aria-labelledby="heading-{{ paragraph_id }}-{{ key + 1 }}">
            {# Loop through all of the accordion section bodies. #}
            {% for body_key, body_item in item['#paragraph'].bp_accordion_section_body %}
              {# Use the same render array as item and set the '#paragraph'. #}
              {% set section_body = item %}
              {% set lang = section_body['#paragraph'].langcode[0].value %}
              {# Check if a translation exists #}
              {% if section_body['#paragraph'].bp_accordion_section_body[body_key].entity.hasTranslation(lang) %}
                {# Load the entity for the current translation #}
              	{% set section_translation= section_body['#paragraph'].bp_accordion_section_body[body_key].entity.getTranslation(lang) %}
              {% else %}
                {# Load the source entity #}
              	{% set section_translation= section_body['#paragraph'].bp_accordion_section_body[body_key].entity %}
              {% endif %}
              {% set section_body = section_body|merge({'#paragraph': section_translation}) %}
              {# Remove the cache keys so it doesn't repeat the first value. #}
              {% set section_body = section_body|merge({'#cache': {}}) %}
              {# Print the compiled section body. #}
              {{ section_body }}
            {% endfor %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>
