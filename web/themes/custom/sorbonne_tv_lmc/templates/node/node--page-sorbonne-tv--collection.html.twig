{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * Custom variables:
 *  - notice_collection_img
 *  - collection_videos_blk
 *  - collection_recommanded_videos_blk
 *  - body_only
 *  - img_only
 *
 *
 * @ingroup themeable
 */
#}

{% set main_attributes = create_attribute() %}
{% set img_wrapper_attributes = create_attribute() %}
{% set body_wrapper_attributes = create_attribute() %}
{%
  set main_classes = [
    'collection-main',
    img_only ? 'img_only',
    body_only ? 'body_only',
    not img_only and not body_only ? 'd-lg-flex',
  ]
%}
{%
  set img_wrapper_classes = [
    'stv_ct_img_wrapper',
    not img_only and not body_only ? 'col-lg-6',
  ]
%}
{%
  set body_wrapper_classes = [
    'collection-body-wrapper',
    not img_only and not body_only ? 'col-lg-6',
  ]
%}

<article{{ attributes.addClass('row gx-0') }}>
    <div class="col-12">
        <div{{ content_attributes.addClass('container') }}>

            <h1 class="page-title video-title bullet-title">
                <span class="title-txt">{{ label }}</span><span class="title-bullet"></span>
            </h1>
            <div {{ main_attributes.addClass(main_classes) }}>
                {% if notice_collection_img %}
                    <div {{ img_wrapper_attributes.addClass(img_wrapper_classes) }}>{{ notice_collection_img }}</div>
                {% endif %}

                {% if content.body %}
                    <div {{ body_wrapper_attributes.addClass(body_wrapper_classes) }}>{{ content.body }}</div>
                {% endif %}
            </div>

      </div>

      <div class="collections_videos_section">
        <div class="section_container container">
            {% if collection_videos_blk %}
                {{ collection_videos_blk }}
            {% endif %}
        </div>
      </div>

      <div class="collections_recommanded_videos_section">
        <div class="section_container container">
            {% if collection_recommanded_videos_blk %}
                {{ collection_recommanded_videos_blk }}
            {% endif %}
        </div>
      </div>
    </div>
</article>

