<section id="section_hp">

    <div class="d-flex flex-row align-items-center container">
        {#
        <div>
            <div class="home_player_left">
                <img src="/themes/custom/sorbonne_tv_lmc/assets/img/icon-embed.png"><br>
            </div>
        </div>
        #}
        <div class="w-embed">
            <div class="home_bg_white">
                <div class="home_player_embed video-container">

                    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script><!-- Or if you want a more recent canary version --><!-- <script src=“https://cdn.jsdelivr.net/npm/hls.js@canary”></script> -->
                    <video controls="" id="live" height="auto" width="100%" class="embed-responsive-item">&nbsp;</video>
                    <script>
                        var video = document.getElementById('live');
                        if(Hls.isSupported()) {
                            var hls = new Hls();
                            hls.loadSource('{{ url.url }}');
                            hls.attachMedia(video);
                            hls.on(Hls.Events.MANIFEST_PARSED,function() {
                                video.play();
                            });
                        }
                            // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
                            // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element throught the `src` property.
                            // This is using the built-in support of the plain video element, without using hls.js.
                            // Note: it would be more normal to wait on the ‘canplay’ event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven
                        // white-list before a ‘canplay’ event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is ‘loadedmetadata’.
                        else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                            video.src = '{{ url.url }}';
                            video.addEventListener('loadedmetadata',function() {
                                video.play();
                            });
                        }
                    </script>


                </div>
            </div>
        </div>
        <div class="home_player_right">
            {% if links.link1 %}
                <a href="{{ links.link1 }}" target="_blank"><img src="/themes/custom/sorbonne_tv_lmc/assets/img/icon-embed-1.png"></a><br>
            {% endif %}
            {% if links.link2 %}
                <a href="{{ links.link2 }}" target="_blank"><img src="/themes/custom/sorbonne_tv_lmc/assets/img/icon-embed-2.png"></a><br>
            {% endif %}
            {% if links.link3 %}
                <a href="{{ links.link3 }}" target="_blank"><img src="/themes/custom/sorbonne_tv_lmc/assets/img/icon-embed-3.png"></a>
            {% endif %}
        </div>
    </div>

</section>
