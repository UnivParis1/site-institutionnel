<?php

/**
 * @file
 * Contains up1_pages_personnelles.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use \Drupal\up1_pages_personnelles\ComptexManager;
use \Drupal\up1_pages_personnelles\HalManager;
use \Drupal\user\Entity\User;
use \Drupal\User\UserInterface;
use \Drupal\Node\NodeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use \Drupal\Core\Url;
use \Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function up1_pages_personnelles_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the up1_pages_personnelles module.
    case 'help.page.up1_pages_personnelles':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Gestion des pages personnelles des EC et Doctorants de Paris 1.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function up1_pages_personnelles_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'site') {
    $fields['groups'] = BaseFieldDefinition::create('string')
      ->setLabel(t('LDAP Group(s)'))
      ->setDescription(t('List of LDAP Groups that can access to the site. Separated by ; (Useful for CAS connection)'))
      ->setRevisionable(FALSE)
      ->setSettings([
        'text_type' => 'text',
      ])
      ->setDisplayOptions('form', [
        'weight' => -10,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['ec_enabled'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Enable staff page Enseignants-Chercheurs. '))
      ->setDescription(t('Enables the list of all "Enseignants-Chercheurs" working in this structure. '))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['doc_enabled'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Enable staff page Doctorants. '))
      ->setDescription(t('Enables the list of all "Doctorants" working in this structure. '))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

function up1_pages_personnelles_form_site_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  $form['pages_personnelles'] = [
    '#type' => 'details',
    '#title' => t('Directory and Groups'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['site-form-annuaire'],
    ],
    '#weight' => 100,
    '#optional' => TRUE,
  ];
  $form['staff'] = [
    '#type' => 'details',
    '#title' => t('Équipe'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['site-form-staff'],
    ],
    '#weight' => 100,
    '#optional' => TRUE,
  ];

  if (isset($form['groups'])) {
    $form['groups']['#group'] = 'pages_personnelles';
  }
  if (isset($form['ec_enabled'])) {
    $form['ec_enabled']['#group'] = 'staff';
  }
  if (isset($form['doc_enabled'])) {
    $form['doc_enabled']['#group'] = 'staff';
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function up1_pages_personnelles_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ["node_page_personnelle_form", "node_page_personnelle_edit_form"]) ) {
    if ($form_id == "node_page_personnelle_edit_form") {
      $name = $form['field_uid_ldap']['widget'][0]['value']['#default_value'];

      $nid = $form_state->getformObject()->getEntity()->id();
      $options = ['absolute' => TRUE, 'attributes' => ['target' => '_blank']];
      $url = Url::fromRoute('entity.node.canonical', ['node' => $nid], $options);

      $link = Link::fromTextAndUrl($url->toString(), $url);

      $html_link = $link->toString();

    }
    if ($form_id == "node_page_personnelle_form") {
      $userCurrent = \Drupal::currentUser();

      $user = User::load($userCurrent->id());
      $name = $user->getUsername();
    }
    $userInformation = up1_pages_personnelles_get_comptex_info($name);

    if ($userInformation) {
      $get_emails = up1_pages_personnelles_get_user_email($name);
      $load_teacher = \Drupal::entityTypeManager()->getStorage('user')
        ->loadByProperties(['name' => $name]);
      $teacher = reset($load_teacher);
      if ($teacher) {
        if(empty($teacher->getEmail())) {
          if (isset($get_emails['mail'])) {
            $teacher->mail = $get_emails['mail'];
          }
          else {
            $teacher->mail = $get_emails['eduPersonPrincipalName'];
          }
          $teacher->save();
        }
      }

      $form['title']['#disabled'] = TRUE;

      $form['field_uid_ldap']['widget'][0]['value']['#default_value'] = $name;
      $form['field_uid_ldap']['#access'] = FALSE;

      $form['field_name']['widget'][0]['value']['#default_value'] = strtoupper($userInformation['sn']);
      $form['field_name']['#access'] = FALSE;

      $form['field_firstname']['widget'][0]['value']['#default_value'] = $userInformation['givenName'];
      $form['field_firstname']['#access'] = FALSE;

      $form['field_other_affiliation']['#access'] = FALSE;
      $form['actions']['preview']['#access'] = FALSE;

      if (isset($get_emails['supannMailPerso'])) {
        $form['field_other_email_address']['widget'][0]['value']['#default_value'] = $get_emails['supannMailPerso'];
        $form['field_other_email_address']['#disabled'] = TRUE;
      }
      else {
        $form['field_other_email_address']['#access'] = FALSE;
        $form['field_display_other_email']['#access'] = FALSE;
      }


      $fonction = '';
      if (isset($userInformation['employeeType'])) {
        $fonction .= $userInformation['employeeType'];
      }
      if (isset($userInformation['supannActivite'])) {
        $fonction .= ' (' . $userInformation['supannActivite'] . ')';
      }
      $form['field_fonction']['widget'][0]['value']['#default_value'] = $fonction;
      $form['field_fonction']['#access'] = FALSE;

      $form['field_affiliation']['#access'] = FALSE;
      $form['field_affiliation']['widget'][0]['value']['#default_value'] =
        $userInformation['eduPersonPrimaryAffiliation'] == 'student' ? "doctorant" : "enseignant-chercheur";

      $form['wrapper']['information'] = [
        '#type' => 'markup',
        '#markup' => "<div class='explications'>L'URL publique de ma page perso : $html_link <p><a href='https://mediatheque.univ-paris1.fr/video/2969-comment-mettre-a-jour-sa-page-perso/'>Visualisez le tutoriel en vidéo</a></div>",
      ];
      $form['#attached']['library'][] = 'up1_pages_personnelles/admin';
    }
  }
}

function up1_pages_personnelles_node_create(NodeInterface $node) {
  /*if ($node->getType() == 'page_personnelle') {
    $owner = $node->getOwner();
    $userInformation = up1_pages_personnelles_get_comptex_info($owner->getAccountName());
    if (isset($userInformation) && !empty($userInformation)) {
      $node->title = $userInformation['supannCivilite'] . ' ' . $userInformation['displayName'];
    }
  }*/
}

/**
 * Implements hook_preprocess_HOOK().
 */
function up1_pages_personnelles_preprocess_node(&$variables) {
  $node = $variables['node'];
  $owner = $node->getOwner();

  if ($node->getType() == 'page_personnelle') {
    $userInformation = up1_pages_personnelles_get_comptex_info($owner->getAccountName());

    if ($userInformation) {
      foreach ($userInformation as $key => $information) {
        $variables[$key] = $information;
      }

      $get_publications = $node->get('field_my_hal_publications')->getValue();
        $firstname = $node->get('field_firstname')->getValue();
        $lastname = $node->get('field_name')->getValue();
      if (!empty($get_publications) && $get_publications[0]['value'] && !empty($firstname) && $firstname[0]['value']
      && !empty($lastname) && $lastname[0]['value']) {
        switch ($get_publications[0]['value']) {
          case 'idhal':
            $hal_publications = $node->get('field_id_hal')->getValue();
            $publications = up1_pages_personnelles_get_hal_publications('idhal', $firstname[0]['value'],$lastname[0]['value'],$hal_publications[0]['value']);
            break;
          case 'nomprenom':
            $publications = up1_pages_personnelles_get_hal_publications('nomprenom',$firstname[0]['value'],$lastname[0]['value']);
            break;
          case 'nul':
            $publications = "";
            break;
        }
        $variables['hal_publications'] = $publications;
      }
    }
  }
}

//Private functions
/**
 * @param $name
 *
 * @return array
 */
function up1_pages_personnelles_get_comptex_info($name) {
  $comptex = new ComptexManager();
  $userInformation = $comptex->getUserInformation($name);

  return $userInformation;
}

//Private functions
/**
 * @param $name
 *
 * @return array
 */
function up1_pages_personnelles_get_user_email($name) {
  $comptex = new ComptexManager();
  $email = $comptex->getUserEmail($name);

  return $email;
}

/**
 * @param $method
 * @param $firstname
 * @param $lastname
 * @param null $id_hal
 * @return array
 */
function up1_pages_personnelles_get_hal_publications($method, $firstname, $lastname,$id_hal = NULL) {
  $hal = new HalManager();

  return $hal->getUserPublications($method, $firstname, $lastname,$id_hal);
}

/**
 * @param $firstname
 * @param $name
 *
 * @return array
 */
function up1_pages_personnelles_get_publications_rss($firstname, $name) {
  $hal = new HalManager();
  $publications = $hal->getPublicationsRSS($firstname, $name);

  return $publications;
}

/**
 * @param $data
 *
 * @return string
 */
function up1_comptex_markup($data) {
  $info = "";
  if (isset($data['info'])) {
    foreach ($data['info'] as $datum) {
      $info .= '<div class="info">' . $datum . '</div>';
    }
  }
  if ($data['eduPersonPrimaryAffiliation'] == "student") {
    $type = 'doctorant';
  }
  else {
    $type = "enseignant-chercheur";
  }
  $container = '';

  $fullName = '';
  if (isset($data['supannCivilite']) && isset ($data['displayName'])) {
    $fullName = '<h2 class="cap">' . $data['supannCivilite']. ' '. $data['displayName'] . '</h2>';
  }
  $userPhoto = '';
  if (isset($data['userPhoto'])) {
    $userPhoto = '<div class="imgCircle">
        <img class="imgCircle" src="' . $data['userPhoto'] . '"
        style="width: 100%;height: auto;border: 0 none;margin: -20px 0 0 0px;max-height: none;max-width: none;padding: 0;"/>
      </div>';
  }
  $role = '';
  if (isset ($data['supannRole'])) {
    $role = '<div class="supannRoleEntite">' . $data['supannRole']['name'] . ' ' . $data['supannRole']['structure'] . '</div>';
  }

  $activite = '';
  if (isset($data['supannActivite'])) {
    $activite = '<div class="supannActivite"><span>' . $data['supannActivite'] . '</span></div>';
  }
  $employeeType = '';
  if (isset($data['employeeType'])) {
    $employeeType = '<div class="employeeType">' . $data['employeeType'] . '</div>';
  }
  $phone = '';
  if (isset($data['telephoneNumber'])) {
    $phone .= '<div class="phoneNumbers">
      <div>
        <i class="fa fa-phone"></i><span class="uneditable-input">'. $data['telephoneNumber'] . '</span>
      </div>
    </div>';
  }
  $address = '';
  if (isset($data['buildingName']) || isset($data['postalAddress'])) {
    $address .= '<div class="address">';
    if (isset($data['buildingName'])) {
      $address .= '
        <label><i class="fa fa-map-marker"></i></label><span class="uneditable-input ">' . $data['buildingName']. '</span>';
    }
    if (isset($data['postalAddress'])) {
      $address .= '<span class="postalAddress">' . $data['postalAddress']. '</span>';
    }
    $address .='</div>';
  }

  $container .= '
    <div class="row">
    <div class="col-md-12">' . $fullName . '
      </div>
    </div>
    <div class="boite">
    <div class="row">' . $userPhoto . '

      <div class="col-md-10">
        <div class="row">
          <div class="col-md-7">
            <div>' . $employeeType .'</div>
            ' . $role . '
            <div class="affiliations">
								<span>' . $type . '</span>
            </div>' . $activite . $info . '
          </div>
          <div class="col-md-5 contactInformation">
            <div class="mail"><i class="fa fa-envelope"></i> ' . $data['mail']. '</div>'.
    $phone
    . $address . '
          </div>
      </div>
    </div>
  </div>
  </div>';

  return $container;
}

/**
 * Implements hook_user_login().
 */
/*function up1_pages_personnelles_user_login(UserInterface $account) {
  if ($account->hasRole('enseignant_doctorant')) {
    $query = \Drupal::entityQuery('node')
      ->condition('uid', $account->id())
      ->condition('type', 'page_personnelle');

    $result = $query->execute();
    if (!empty($result) && count($result) == 1) {
      $nid = reset($result);
      $goto = "/node/$nid/edit";
    }
    else {
      $goto = "/node/add/page_personnelle";
    }

    $response = new Symfony\Component\HttpFoundation\RedirectResponse($goto);
    $response->send();
    return;
  }
}*/

/**
 * Implements hook_theme().
 */
function up1_pages_personnelles_theme() {
  return [
    'liste_pages_persos_filtree' => [
      'variables' => [
        'users' => [],
        'link' => NULL,
        'affiliation' => NULL,
        'Trusted' => FALSE,
      ]
    ],
    'list_with_employee_type' => [
      'variables' => [
        'users' => [],
        'link' => NULL,
        'affiliation' => NULL,
        'Trusted' => FALSE,
      ]
    ]
  ];
}

