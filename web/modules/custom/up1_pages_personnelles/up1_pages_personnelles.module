<?php

/**
 * @file
 * Contains up1_pages_personnelles.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use \Drupal\up1_pages_personnelles\ComptexManager;
use \Drupal\up1_pages_personnelles\HalManager;
use \Drupal\user\Entity\User;
use \Drupal\User\UserInterface;
use \Drupal\Node\NodeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use \Drupal\Core\Url;
use \Drupal\Core\Link;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function up1_pages_personnelles_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the up1_pages_personnelles module.
    case 'help.page.up1_pages_personnelles':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Gestion des pages personnelles des EC et Doctorants de Paris 1.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function up1_pages_personnelles_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'site') {
    $fields['groups'] = BaseFieldDefinition::create('string')
      ->setLabel(t('LDAP Group(s)'))
      ->setDescription(t('List of LDAP Groups that can access to the site. Separated by ; (Useful for CAS connection)'))
      ->setRevisionable(FALSE)
      ->setSettings([
        'text_type' => 'text',
      ])
      ->setDisplayOptions('form', [
        'weight' => -10,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['ec_enabled'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Enable staff page Enseignants-Chercheurs. '))
      ->setDescription(t('Enables the list of all "Enseignants-Chercheurs" working in this structure. '))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['doc_enabled'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Enable staff page Doctorants. '))
      ->setDescription(t('Enables the list of all "Doctorants" working in this structure. '))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['trombi_ec_enable'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Enable trombinoscope for EC'))
      ->setDescription(t('List of all ECs displayed as trombinoscope.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['supannEntite_pedagogy'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Show "supannEntite pedagogy" on trombinoscope'))
      ->setDescription(t('See label of the "UFR" on trombinoscope card.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['supannEntite_research'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Show "supannEntite research" on trombinoscope'))
      ->setDescription(t('See label of the "labo de rattachement" on trombinoscope card.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['discipline_enseignement'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Show "discipline d\'enseignement" on trombinoscope'))
      ->setDescription(t('See "discipline d\'enseignement" on trombinoscope card.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['skills_lists'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Show "skills" on trombinoscope'))
      ->setDescription(t('See "skills" list on trombinoscope card.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['supannRole'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Show "supannRole" on trombinoscope'))
      ->setDescription(t('See fonction on trombinoscope card.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['about_me'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Show "about me" on trombinoscope'))
      ->setDescription(t('See about me section on trombinoscope card.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['supannConsentement'] = BaseFieldDefinition::create('string')
      ->setLabel(t('supannConsentement'))
      ->setDescription(t('Value of supannConsentement field in ldap for this grouper group.'))
      ->setRevisionable(FALSE)
      ->setSettings([
        'text_type' => 'text',
      ])
      ->setDisplayOptions('form', [
        'weight' => -10,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['trombi_students_enable'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Enable trombinoscope for students'))
      ->setDescription(t('List of all students displayed as trombinoscope.'))
      ->setDefaultValue(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

function up1_pages_personnelles_form_site_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['pages_personnelles'] = [
    '#type' => 'details',
    '#title' => t('Directory and Groups'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['site-form-annuaire'],
    ],
    '#weight' => 100,
    '#optional' => TRUE,
  ];
  $form['staff_ec'] = [
    '#type' => 'details',
    '#title' => t('Équipe Enseignant-Chercheur'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['site-form-staff'],
    ],
    '#weight' => 100,
    '#optional' => TRUE,
  ];
  $form['staff_doc'] = [
    '#type' => 'details',
    '#title' => t('Équipe doctorants'),
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['site-form-staff'],
    ],
    '#weight' => 100,
    '#optional' => TRUE,
  ];

  if (isset($form['groups'])) {
    $form['groups']['#group'] = 'pages_personnelles';
  }
  if (isset($form['supannConsentement'])) {
    $form['supannConsentement']['#group'] = 'pages_personnelles';
  }
  if (isset($form['ec_enabled'])) {
    $form['ec_enabled']['#group'] = 'staff_ec';
  }
  if (isset($form['trombi_ec_enable'])) {
    $form['trombi_ec_enable']['#group'] = 'staff_ec';
  }
  if (isset($form['supannEntite_pedagogy'])) {
    $form['supannEntite_pedagogy']['#group'] = 'staff_ec';
  }
  if (isset($form['supannEntite_research'])) {
    $form['supannEntite_research']['#group'] = 'staff_ec';
  }
  if (isset($form['discipline_enseignement'])) {
    $form['discipline_enseignement']['#group'] = 'staff_ec';
  }
  if (isset($form['skills_lists'])) {
    $form['skills_lists']['#group'] = 'staff_ec';
  }
  if (isset($form['supannRole'])) {
    $form['supannRole']['#group'] = 'staff_ec';
  }
  if (isset($form['about_me'])) {
    $form['about_me']['#group'] = 'staff_ec';
  }

  if (isset($form['doc_enabled'])) {
    $form['doc_enabled']['#group'] = 'staff_doc';
  }
  if (isset($form['trombi_students_enable'])) {
    $form['trombi_students_enable']['#group'] = 'staff_doc';
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function up1_pages_personnelles_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ["node_page_personnelle_form", "node_page_personnelle_edit_form"]) ) {
    $current_user = \Drupal::currentUser();

    if (!in_array('administrator', $current_user->getRoles())) {
      $form['field_uid_ldap']['#access'] = FALSE;
      $form['title']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function up1_pages_personnelles_preprocess_node(&$variables) {
  $node = $variables['node'];
  $owner = $node->getOwner();

  if ($node->getType() == 'page_personnelle') {
    $userInformation = up1_pages_personnelles_get_comptex_info($owner->getAccountName());

    if ($userInformation) {
      foreach ($userInformation as $key => $information) {
        $variables[$key] = $information;
      }

      $get_publications = $node->get('field_my_hal_publications')->getValue();

      if (!empty($get_publications) && $get_publications[0]['value'] && !empty($userInformation['givenName'])
        && !empty($userInformation['sn'])) {
        switch ($get_publications[0]['value']) {
          case 'idhal':
            $hal_publications = $node->get('field_id_hal')->getValue();
            $publications = up1_pages_personnelles_get_hal_publications('idhal',$userInformation['givenName'],$userInformation['sn'],$hal_publications[0]['value']);
            break;
          case 'nomprenom':
            $publications = up1_pages_personnelles_get_hal_publications('nomprenom',$userInformation['givenName'],$userInformation['sn']);
            break;
          case 'nul':
            $publications = "";
            break;
        }
        $variables['hal_publications'] = $publications;
      }
    }
  }
}

//Private functions
/**
 * @param $name
 *
 * @return array
 */
function up1_pages_personnelles_get_comptex_info($name) {
  $comptex = new ComptexManager();
  $userInformation = $comptex->getUserInformation($name);

  return $userInformation;
}

//Private functions
/**
 * @param $name
 *
 * @return array
 */
function up1_pages_personnelles_get_user_email($name) {
  $comptex = new ComptexManager();
  $email = $comptex->getUserEmail($name);

  return $email;
}

/**
 * @param $method
 * @param $firstname
 * @param $lastname
 * @param null $id_hal
 * @return array
 */
function up1_pages_personnelles_get_hal_publications($method, $firstname, $lastname,$id_hal = NULL) {
  $hal = new HalManager();

  return $hal->getUserPublications($method, $firstname, $lastname,$id_hal);
}

/**
 * @param $firstname
 * @param $name
 *
 * @return array
 */
function up1_pages_personnelles_get_publications_rss($firstname, $name) {
  $hal = new HalManager();
  $publications = $hal->getPublicationsRSS($firstname, $name);

  return $publications;
}

/**
 * @param $data
 *
 * @return string
 */
function up1_comptex_markup($data) {
  $info = "";
  if (isset($data['info'])) {
    foreach ($data['info'] as $datum) {
      $info .= '<div class="info">' . $datum . '</div>';
    }
  }
  if ($data['eduPersonPrimaryAffiliation'] == "student") {
    $type = 'doctorant';
  }
  else {
    $type = "enseignant-chercheur";
  }
  $container = '';

  $fullName = '';
  if (isset($data['supannCivilite']) && isset ($data['displayName'])) {
    $fullName = '<h2 class="cap">' . $data['supannCivilite']. ' '. $data['displayName'] . '</h2>';
  }
  $userPhoto = '';
  if (isset($data['userPhoto'])) {
    $userPhoto = '<div class="imgCircle">
        <img class="imgCircle" src="' . $data['userPhoto'] . '"
        style="width: 100%;height: auto;border: 0 none;margin: -20px 0 0 0px;max-height: none;max-width: none;padding: 0;"/>
      </div>';
  }
  $role = '';
  if (isset ($data['supannRole'])) {
    $role = '<div class="supannRoleEntite">' . $data['supannRole']['name'] . ' ' . $data['supannRole']['structure'] . '</div>';
  }

  $activite = '';
  if (isset($data['supannActivite'])) {
    $activite = '<div class="supannActivite"><span>' . $data['supannActivite'] . '</span></div>';
  }
  $employeeType = '';
  if (isset($data['employeeType'])) {
    $employeeType = '<div class="employeeType">' . $data['employeeType'] . '</div>';
  }
  $phone = '';
  if (isset($data['telephoneNumber'])) {
    $phone .= '<div class="phoneNumbers">
      <div>
        <i class="fa fa-phone"></i><span class="uneditable-input">'. $data['telephoneNumber'] . '</span>
      </div>
    </div>';
  }
  $address = '';
  if (isset($data['buildingName']) || isset($data['postalAddress'])) {
    $address .= '<div class="address">';
    if (isset($data['buildingName'])) {
      $address .= '
        <label><i class="fa fa-map-marker"></i></label><span class="uneditable-input ">' . $data['buildingName']. '</span>';
    }
    if (isset($data['postalAddress'])) {
      $address .= '<span class="postalAddress">' . $data['postalAddress']. '</span>';
    }
    $address .='</div>';
  }

  $container .= '
    <div class="row">
    <div class="col-md-12">' . $fullName . '
      </div>
    </div>
    <div class="boite">
    <div class="row">' . $userPhoto . '

      <div class="col-md-10">
        <div class="row">
          <div class="col-md-7">
            <div>' . $employeeType .'</div>
            ' . $role . '
            <div class="affiliations">
								<span>' . $type . '</span>
            </div>' . $activite . $info . '
          </div>
          <div class="col-md-5 contactInformation">
            <div class="mail"><i class="fa fa-envelope"></i> ' . $data['mail']. '</div>'.
    $phone
    . $address . '
          </div>
      </div>
    </div>
  </div>
  </div>';

  return $container;
}

/**
 * Implements hook_theme().
 */
function up1_pages_personnelles_theme() {
  return [
    'liste_pages_persos_filtree' => [
      'variables' => [
        'users' => [],
        'link' => NULL,
        'affiliation' => NULL,
        'Trusted' => FALSE,
      ]
    ],
    'list_with_employee_type' => [
      'variables' => [
        'users' => [],
        'link' => NULL,
        'affiliation' => NULL,
        'Trusted' => FALSE,
      ]
    ],
    'list_as_trombinoscope' => [
      'variables' => [
        'users' => [],
        'link' => NULL,
        'affiliation' => NULL,
        'Trusted' => FALSE,
        'trombi_settings' => []
      ]
    ]
  ];
}

