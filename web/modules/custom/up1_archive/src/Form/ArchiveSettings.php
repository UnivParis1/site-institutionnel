<?php

namespace Drupal\up1_archive\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Class ArchiveSettings.
 *
 * @ingroup up1_archive
 */
class ArchiveSettings extends ConfigFormBase {
  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames()
  {
    return [
      'up1_archive.settings',
    ];
  }

  /**
   * Returns a unique string identifying the form.
   *
   * @return string
   *   The unique string identifying the form.
   */
  public function getFormId()
  {
    return 'up1_archive_settings';
  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   * @return void
   */
  public function validateForm(array &$form, FormStateInterface $form_state)
  {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   * @return void
   */
  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    parent::submitForm($form, $form_state);
    $this->config('up1_archive.settings')
      ->set('url_web', $form_state->getValue('url_web'))
      ->set('access_key', $form_state->getValue('access_key'))
      ->set('secret_key', $form_state->getValue('secret_key'))
      ->set('url_node', $form_state->getValue('url_node'))
      ->set('nid', $form_state->getValue('nid'))
      ->set('pages_to_archive',  $form_state->getValue('pages_to_archive'))
      ->save();
  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   * @return array
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = $this->config('up1_archive.settings');
    $url_web = $config->get('url_web');
    $access_key =  $config->get('access_key');
    $secret_key = $config->get('secret_key');
    $url_node = $config->get('url_node');
    $nid = $config->get('nid');
    $pages_to_archive = $config->get('pages_to_archive');

    $form['archive'] = [
      '#type' => 'details',
      '#title' => t('Web archive parameters'),
      '#weight' => 50,
      '#open' => TRUE,
    ];
    $form['archive']['url_web'] = [
      '#type' => 'textfield',
      '#title' => $this->t('URL du site d\'archives web.'),
      '#description' => $this->t('Par défaut : "https://web.archive.org/save"'),
      '#maxlength' => 64,
      '#size' => 64,
      '#default_value' => isset($url_web) ? $url_web : "https://web.archive.org/save",
      '#required' => TRUE
    ];
    $form['archive']['access_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Access Key.'),
      '#description' => $this->t('archive.org S3 API Keys.'),
      '#maxlength' => 128,
      '#size' => 64,
      '#default_value' => isset($access_key) ? $access_key : "",
      '#required' => TRUE
    ];
    $form['archive']['secret_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Secret Key.'),
      '#description' => $this->t('archive.org S3 API Keys.'),
      '#maxlength' => 64,
      '#size' => 64,
      '#default_value' => isset($secret_key) ? $secret_key : "",
      '#required' => TRUE
    ];

    $nb_pages_to_archive = count($pages_to_archive );
    $form['node'] = [
      '#type' => 'details',
      '#title' => t('Page(s) to archive'),
      '#weight' => 50,
      '#open' => TRUE,
    ];
    $form['node']['container'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'pages-to-archive-container']
    ];
    if ($this->additionnal_rows < 4) {
      $form['node']['container']['actions'] = [
        '#type' => 'actions'
      ];
      $form['node']['container']['actions']['add_item'] = [
        '#type' => 'submit',
        '#value' => $this->t('Add new page to archive'),
        '#submit' => ['::add_page_to_archive'],
        '#ajax' => [
          'callback' => '::add_page_to_archive_ajax_callback',
          'wrapper' => 'pages-to-archive-container',
        ],
      ];
    }
    $form['node']['container']['pages_to_archive'] = [
      '#type' => 'table',
    ];

    for ($i = 0; $i < $nb_pages_to_archive; $i++) {
      $form['node']['container']["pages_to_archive"][$i]["url_node"] = [
        '#type' => "url",
        '#title' => $this->t("URL du node à archiver."),
        '#default_value' => $pages_to_archive[$i]["url_node"],
        '#description' => $this->t('Par exemple : "https://pantheonsorbonne.fr/universite/publications-reglementaires"'),
        '#required' => TRUE,
      ];
      $form['node']['container']["pages_to_archive"][$i]["nid"] = [
        '#type' => "textfield",
        '#default_value' => $pages_to_archive[$i]["nid"],
        '#title' => $this->t('Id du noeud à archiver.'),
        '#description' => $this->t('Par exemple : 31866'),
        '#maxlength' => 10,
        '#size' => 64,
        '#required' => TRUE
      ];
    }

    for($i=0; $i < $this->additionnal_rows; $i++){
      $form['node']['container']['pages_to_archive'][$nb_pages_to_archive+$i]['#attributes']['class'][] = 'draggable';
      $form['node']['container']["pages_to_archive"][$nb_pages_to_archive+$i]["url_node"] = [
        '#type' => "url",
        '#title' => $this->t("URL du node à archiver."),
      ];
      $form['node']['container']["pages_to_archive"][$nb_pages_to_archive+$i]["nid"] = [
        '#type' => "textfield",
        '#title' => $this->t('Id du noeud à archiver.'),
      ];
    }

    $form['node']['url_node'] = [
      '#type' => 'textfield',
      '#title' => $this->t('URL du node à archiver.'),
      '#description' => $this->t('Par exemple : "https://pantheonsorbonne.fr/universite/publications-reglementaires"'),
      '#maxlength' => 256,
      '#size' => 64,
      '#default_value' =>  isset($url_node) ? $url_node : "",
      '#required' => TRUE
    ];
    $form['node']['nid'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Id du noeud à archiver.'),
      '#description' => $this->t('Par exemple : 31866'),
      '#maxlength' => 10,
      '#size' => 64,
      '#default_value' => isset($nid) ? $nid : "",
      '#required' => TRUE
    ];

    $form_state->setCached(false);
    return parent::buildForm($form, $form_state);
  }

  /**
   * Function add_page_to_archive_ajax_callback().
   *
   * @returns array $form.
   */
  public function add_page_to_archive_ajax_callback($form, $form_state) {
    return $form['node']['container'];
  }

  /**
   * Function add_page_to_archive
   */
  public function add_page_to_archive(array &$form, FormStateInterface $form_state) {
    if ($this->additionnal_rows < 6) {
      $this->additionnal_rows++;
      $form_state->setRebuild();
    }
  }
}
